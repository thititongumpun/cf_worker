import { DisplayOptions } from 'concordance';

declare function getConcordanceTheme(): {
    boolean: {
        (input: unknown): string;
        open: string;
        close: string;
    };
    circular: string;
    date: {
        invalid: string;
        value: {
            (input: unknown): string;
            open: string;
            close: string;
        };
    };
    diffGutters: {
        actual: string;
        expected: string;
        padding: string;
    };
    error: {
        ctor: {
            open: string;
            close: string;
        };
        name: {
            (input: unknown): string;
            open: string;
            close: string;
        };
    };
    function: {
        name: {
            (input: unknown): string;
            open: string;
            close: string;
        };
        stringTag: {
            (input: unknown): string;
            open: string;
            close: string;
        };
    };
    global: {
        (input: unknown): string;
        open: string;
        close: string;
    };
    item: {
        after: string;
    };
    list: {
        openBracket: string;
        closeBracket: string;
    };
    mapEntry: {
        after: string;
    };
    maxDepth: string;
    null: {
        (input: unknown): string;
        open: string;
        close: string;
    };
    number: {
        (input: unknown): string;
        open: string;
        close: string;
    };
    object: {
        openBracket: string;
        closeBracket: string;
        ctor: {
            (input: unknown): string;
            open: string;
            close: string;
        };
        stringTag: {
            open: string;
            close: string;
        };
        secondaryStringTag: {
            open: string;
            close: string;
        };
    };
    property: {
        after: string;
        keyBracket: {
            open: string;
            close: string;
        };
        valueFallback: string;
    };
    regexp: {
        source: {
            open: string;
            close: string;
        };
        flags: {
            (input: unknown): string;
            open: string;
            close: string;
        };
    };
    stats: {
        separator: string;
    };
    string: {
        open: string;
        close: string;
        line: {
            open: string;
            close: string;
        };
        multiline: {
            start: string;
            end: string;
        };
        controlPicture: {
            (input: unknown): string;
            open: string;
            close: string;
        };
        diff: {
            insert: {
                open: string;
                close: string;
            };
            delete: {
                open: string;
                close: string;
            };
            equal: {
                (input: unknown): string;
                open: string;
                close: string;
            };
            insertLine: {
                open: string;
                close: string;
            };
            deleteLine: {
                open: string;
                close: string;
            };
        };
    };
    symbol: {
        (input: unknown): string;
        open: string;
        close: string;
    };
    typedArray: {
        bytes: {
            (input: unknown): string;
            open: string;
            close: string;
        };
    };
    undefined: {
        (input: unknown): string;
        open: string;
        close: string;
    };
};
declare function diffDescriptors(actual: unknown, expected: unknown, options: DisplayOptions): string;
declare function formatDescriptor(value: unknown, options: DisplayOptions): string;

interface DiffOptions {
    showLegend?: boolean;
}
/**
* Returns unified diff between two strings with coloured ANSI output.
*
* @private
* @param {String} actual
* @param {String} expected
* @return {string} The diff.
*/
declare function unifiedDiff(actual: unknown, expected: unknown, options?: DiffOptions): string;

export { DiffOptions, diffDescriptors, formatDescriptor, getConcordanceTheme, unifiedDiff };
